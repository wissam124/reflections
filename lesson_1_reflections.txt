1. How did viewing a diff between two versions of a file help you see the
bug that was introduced?

Unix command: diff -u old_file new_file
-u option is for unified

- Compare additions and removals to the code, indicating the area of
  the code where the changes have occured, indicating clearly
  additions with a + and removals with a -.

2. How could having easy access to the entire history of a file make you
a more efficient programmer in the long term?

- Understand changes that have occured in the development.
- Allow to quickly revert back to a previous version in case new code
breaks down.
- Improve collaboration with other developers by allowing them to see
the history of the development.

3. What do you think are the pros and cons of manually choosing when to
create a commit, like you do in Git, vs having version automatically
saved, like Google docs does?

Pros:
- Keeping changes to logical units
- Give control to the user
- Don't clutter the history with meaningless versions

Cons:
- Risk loosing work

4. Why do you think some version control systems, like Git, allow
saving multiple files in one commit, while others, like Google Docs,
treat each file separately?

Git is a system designed to manage complex development projects where
good design is usually modular.

5. How can you use the commands git log and git diff to view the
history of files?

- git log allows the user to see the whole history of commits
- git diff allows the user to compare one commit to another

6. How might using version control make you more confident to make
changes that could break something?

I know I can experiment since I can always come back to a previous
version of my code provided I have committed it.

7. Now that you have your workspace set up, what do you want to try
using Git for?

Manage efficiently codebase collaboration.
Test 2
