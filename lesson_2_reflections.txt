1. What happens when you initialize a repository? Why do you need to do it?

A .git directory is created upon initialisation of a git repository.
The working directory where the repository is created is now under
version control. Initialising the git repository allows the user to
later commit and track code changes.

No initial commit is done as this should be left to the user to decide
when commits are executed. A commit should generally be linked to a
single logical change in the codebase and a message should be
associated to the commit which is why the user is ultimately
responsible for doing a commit.

2. How is the staging area different from the working directory and
the repository?
What value do you think it offers?

The staging area is an intermediate area where files can be added one at a time
before being committed to the repository. It creates a temporary silo where
all changes can be added and reviewed (through git status) before a commit.

3. How can you use the staging area to make sure you have one commit per logical
change?

By running git diff --staged, we can compare the changes between files
in the staging area and the most recent commit, helping us to make
sure we have one commit per logical change.

4. What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Branching allows the user to carry out multiple developments in a
parallel fashion. Branches specific to experimental features or
different versions (say translation) can be created while the main
branch is unaffected (and can still be modified and committed should
any bugs arise). The mechanism of merging then allows various branches
to tie back.

5. How do the diagrams help you visualize the branch structure?


6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
After merging two branches together, common parts of the code will be
kept while additions from the common reachable parent between the two
branches will be added. Likewise, deletions from the common reachable
parent that may have been introduced in any of the two branches will
be kept removed from the merged commit.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
